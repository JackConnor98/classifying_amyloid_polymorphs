from bs4 import BeautifulSoup
import requests 
import csv
import os
import PyPDF2
import re


##### STEP 1 - Converting PDB ids into EMDB numbers #####

# Getting EMDB names from PDB names
url = "https://www.rcsb.org/structure/"

# list of pdbs to import taken from pdb_names generated by "get_pdb_names.R"
with open("Output/pdb_names.txt", "r") as file:
    # Skip the first line which contains the column name
    next(file)
    # Initialize an empty list to store the names
    pdb = []
    # Iterate over the lines in the file
    for line in file:
        # Strip any leading/trailing whitespaces and append the name to the list
        pdb.append(line.strip())

# Create an empty list to store the emdb numbers
emdb_results = []

for i in pdb:
    # adding pdb to the URL search
    pdb_query = url + i

    # Reading in PDB HTML page
    response = requests.get(pdb_query)
    doc = BeautifulSoup(response.text, "html.parser")

    try:
        # Finding the section containing the EMDB number
        header_emdb = doc.find("li", id="header_emdb")

        # Isolating the line of interest
        strong_element = header_emdb.find("strong")

        # Extracting the text between <strong> tags
        emdb_text = strong_element.get_text(strip=True)

        # Separating based on "-" and choosing the second element
        emdb_number = emdb_text.split("-")[1]

        # Remove the ':' from emd_number
        emdb_number = emdb_number[:-1]

        # Append the data to the results list
        emdb_results.append((i, emdb_number))

        print("PDB: " + i + "   EMDB: " + emdb_number + "\n")

    except AttributeError:
        # If PDB does not have an EMDB number, then
        emdb_results.append((i, "NA"))

        print("PDB: " + i + "   EMDB: Not Found\n")




##### Step 2 - Using the EMDB numbers to scrape helical twist and helical rise from EMDB and calculate half pitch #####



# Creating a list of only emdb numbers using list comprehension
emdb_numbers = [emdb for pdb, emdb in emdb_results]

# Initializing results
results = []

for i in range(len(emdb_numbers)):

    if emdb_numbers[i] != "NA":

        # Reading in a HTML from a website
        url = f"https://files.wwpdb.org/pub/emdb/validation_reports/EMD-{emdb_numbers[i]}/emd_{emdb_numbers[i]}_full_validation.pdf.gz"

        # Download the PDF file
        response = requests.get(url, stream=True)

        if response.status_code == 200:
            # Create a PDF file object from the downloaded content
            with open("downloaded.pdf", 'wb') as pdf_file:
                for chunk in response.iter_content(1024):
                    pdf_file.write(chunk)

            # Open the PDF file
            pdf = PyPDF2.PdfReader("downloaded.pdf")

            # Check if the PDF has at least 2 pages
            if len(pdf.pages) >= 2:
                # Get the second page (page indexing starts from 0)
                second_page = pdf.pages[1]

                # Extract the text content from the second page
                second_page_text = second_page.extract_text()

                # Print or process the extracted text as needed
                #print(second_page_text)

            else:
                print("The PDF does not have at least 2 pages.")
        else:
            print("Failed to download the PDF.")


        # Use regular expressions to find and extract the numbers after "twist=" and "rise="
        twist_pattern = r"wist=(-?\d+\.\d+)"
        rise_pattern = r"rise=([\d.]+)"

        # Search for the pattern in the text
        twist_match = re.search(twist_pattern, second_page_text)
        rise_match = re.search(rise_pattern, second_page_text)

        if twist_match and rise_match:
            # Extract the numbers from the matches and convert to float or int as needed
            extracted_twist = float(twist_match.group(1))
            extracted_rise = float(rise_match.group(1))

            # Calculate the half pitch (180)

            if abs(extracted_twist) > 100:

                twist_converted = False

                if extracted_twist < 0:
                    
                    extracted_twist = round(180 - abs(extracted_twist), 2)

                    twist_converted = True

                if extracted_twist > 0 and twist_converted == False:

                    extracted_twist = round(extracted_twist - 180, 2)

            
            half_pitch = round(abs((180/extracted_twist)*extracted_rise), 2)

            if extracted_twist > 0:
                
                handed = "right"

            if extracted_twist < 0:

                handed = "left"

            results.append((pdb[i], emdb_numbers[i], extracted_twist, extracted_rise, half_pitch, handed))

            print("Helical Twist: ", extracted_twist)
            print("\nHelical Rise: ", extracted_rise)
            print("\nHalf Pitch: ", half_pitch)
            print("\nHandedness: ", handed)

        else:
            
            results.append((pdb[i], emdb_numbers[i], "NA", "NA", "NA", "NA"))

            print("No match found.")



    else:
        results.append((pdb[i], emdb_numbers[i], "NA", "NA", "NA", "NA"))    

# Create and write the results to a text file
with open("Output/emdb_data.txt", "w") as file:
    file.write("pdb\temdb\ttwist\trise\thalf_pitch\thandedness\n")
    for pdb_value, emdb_value, twist_value, rise_value, half_pitch, handed in results:
        file.write(f"{pdb_value}\t{emdb_value}\t{twist_value}\t{rise_value}\t{half_pitch}\t{handed}\n")


# Delete the downloaded pdf file
if os.path.exists("downloaded.pdf"):
    os.remove("downloaded.pdf")

print("Results saved to 'Output/emdb_data.txt'")
